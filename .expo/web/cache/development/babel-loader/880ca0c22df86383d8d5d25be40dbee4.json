{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $587d3ad58be6d31f$exports = {};\n$parcel$export($587d3ad58be6d31f$exports, \"useCheckboxGroupState\", function () {\n  return $587d3ad58be6d31f$export$daff6da51032a415;\n});\n\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _$b3nuO$useControlled = $b3nuO$useControlledState(props.value, props.defaultValue || [], props.onChange),\n      _$b3nuO$useControlled2 = _slicedToArray(_$b3nuO$useControlled, 2),\n      selectedValues = _$b3nuO$useControlled2[0],\n      _setValue = _$b3nuO$useControlled2[1];\n\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) _setValue(selectedValues.concat(value));\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));else _setValue(selectedValues.concat(value));\n    }\n  };\n  return state;\n}\n\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;SA6CgB,yC,GAA0E;EAAA,IAApD,KAAoD,uEAAxB,EAAwB;;EACxF,4BAAiC,yBAAkB,CAAC,KAAK,CAAC,KAAP,EAAc,KAAK,CAAC,YAAN,IAAsB,EAApC,EAAwC,KAAK,CAAC,QAA9C,CAAnD;EAAA;EAAA,IAAK,cAAL;EAAA,IAAqB,SAArB;;EAEA,IAAM,KAAK,GAAuB;IAChC,KAAK,EAAE,cADyB;IAEhC,QAFgC,oBAEvB,KAFuB,EAEhB;MACd,IAAI,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAA9B,EACE;;MAGF,SAAQ,CAAC,KAAD,CAAR;IACD,CAR+B;IAShC,UAAU,EAAE,KAAK,CAAC,UAAN,IAAoB,KATA;IAUhC,UAAU,EAAE,KAAK,CAAC,UAAN,IAAoB,KAVA;IAWhC,UAXgC,sBAWrB,KAXqB,EAWd;MAChB,OAAO,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAP;IACD,CAb+B;IAchC,QAdgC,oBAcvB,KAduB,EAchB;MACd,IAAI,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAA9B,EACE;MAEF,IAAE,CAAG,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAL,EACE,SAAQ,CAAC,cAAc,CAAC,MAAf,CAAsB,KAAtB,CAAD,CAAR;IAEH,CArB+B;IAsBhC,WAtBgC,uBAsBpB,KAtBoB,EAsBb;MACjB,IAAI,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAA9B,EACE;MAEF,IAAI,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAJ,EACE,SAAQ,CAAC,cAAc,CAAC,MAAf,CAAqB,UAAC,aAAD;QAAA,OAAkB,aAAa,KAAK,KAApC;MAAA,CAArB,CAAD,CAAR;IAEH,CA7B+B;IA8BhC,WA9BgC,uBA8BpB,KA9BoB,EA8Bb;MACjB,IAAI,KAAK,CAAC,UAAN,IAAoB,KAAK,CAAC,UAA9B,EACE;MAEF,IAAI,cAAc,CAAC,QAAf,CAAwB,KAAxB,CAAJ,EACE,SAAQ,CAAC,cAAc,CAAC,MAAf,CAAqB,UAAC,aAAD;QAAA,OAAkB,aAAa,KAAK,KAApC;MAAA,CAArB,CAAD,CAAR,CADF,KAGE,SAAQ,CAAC,cAAc,CAAC,MAAf,CAAsB,KAAtB,CAAD,CAAR;IAEH;EAvC+B,CAAlC;EA0CA,OAAO,KAAP;AACD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}